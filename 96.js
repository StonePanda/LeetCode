/**
 * @param {number} n
 * @return {number}
 */
 var numTrees = function(n) {
    // 对dp[i]以及下标的定义是：dp[i]表示i有二叉搜索树dp[i]种
    // 然后关于递推公式的推导，自己画图的时候是可以知道dp[i]和dp[i-1]是有关系的
    // 就是dp[i]添加一个子节点，但是又不知道如何用代码的形式表示出来
    // 叶子节点有两种呈现方式，非叶子节点只有1种或0种
    // 发现不了规律啊我疯了/(ㄒoㄒ)/~~
    // 最后还是看了教程写出来的，动态规划好难啊！/(ㄒoㄒ)/~~
    // 也发现了貌似可以根据前面的子树的结果去推，但是答案其实是要逆向思维
    // 而我想的是正向思维，就是从前面往后面推，
    // 也发现了示例里的123节点，但是竟然用数组去表示的时候思维就点歪了
    // 总之记住这次教程的分析吧
        // 发现一般dp数组就是直接就是答案
        let dp=Array(n+1)
        for(let i=0;i<=n;i++) dp[i]=0
        dp[0]=1
        for(let i=1;i<=n;i++){
            for(let j=1;j<=i;j++){
                dp[i]+=dp[j-1]*dp[i-j]
            }
        }
        return dp[n]
    };